# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  issues: write  # Add permission to create issues on build failures

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        id: build
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        continue-on-error: true
      - name: Upload artifact (if build succeeded)
        if: steps.build.outcome == 'success'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Lint analysis job - runs when build fails
  lint-analysis-on-failure:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.build-success != 'true'
    name: 🔍 Analyze Build Failures

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run comprehensive lint analysis
        id: analyze
        run: |
          echo "🔍 Running lint analysis to identify build failures..."
          
          # Run the enhanced lint analyzer that includes TypeScript checks
          npx tsx scripts/lint-automation/lint-analyzer.ts || true
          
          # Check if we generated a report and if there are any issues
          if [ -f "lint-analysis-report.json" ]; then
            ISSUES_COUNT=$(jq '.summary.totalIssues' lint-analysis-report.json)
            echo "issues-count=${ISSUES_COUNT}" >> $GITHUB_OUTPUT
            
            if [ "${ISSUES_COUNT}" -gt "0" ]; then
              echo "has-issues=true" >> $GITHUB_OUTPUT
              echo "📊 Found ${ISSUES_COUNT} issues causing build failure"
            else
              echo "has-issues=false" >> $GITHUB_OUTPUT
              echo "🤔 Build failed but no lint/TypeScript issues found"
            fi
          else
            echo "has-issues=false" >> $GITHUB_OUTPUT
            echo "issues-count=0" >> $GITHUB_OUTPUT
            echo "❌ Could not analyze build failure"
          fi

      - name: 📄 Upload build failure analysis
        if: steps.analyze.outputs.has-issues == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-failure-analysis-${{ github.run_number }}
          path: |
            lint-analysis-report.json
            lint-analysis-report.md
          retention-days: 30

      - name: 🎯 Create GitHub issues for build failures
        if: steps.analyze.outputs.has-issues == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
        run: |
          echo "📝 Creating GitHub issues for build failures..."
          npx tsx scripts/lint-automation/github-issue-creator.ts

      - name: 💬 Add deployment failure comment
        if: steps.analyze.outputs.has-issues == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('lint-analysis-report.json', 'utf8'));
              
              // Find the most recent commit
              const { data: commits } = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                per_page: 1
              });
              
              const comment = `## 🚨 Next.js Deployment Failed
              
              **Build failed with ${report.summary.totalIssues} issues:**
              - ❌ ${report.summary.errorCount} errors
              - ⚠️ ${report.summary.warningCount} warnings
              - 📁 ${report.summary.affectedFiles} files affected
              
              ### 🔧 Most Common Issues:
              ${report.summary.commonPatterns.map(p => `- ${p}`).join('\n')}
              
              ### 🎯 Immediate Actions Required:
              ${report.recommendations.immediate.map(r => `- [ ] ${r}`).join('\n')}
              
              **📊 Full analysis report:** See workflow artifacts for detailed breakdown.
              
              **🤖 GitHub Issues:** Individual issues have been created for each problem to track resolution.
              
              ---
              *Automated deployment failure analysis - Commit: ${context.sha.substring(0, 7)}*`;
              
              // Create a commit comment
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: comment
              });
            } catch (error) {
              console.log('Could not post commit comment:', error.message);
            }

  # Deployment job - only runs if build succeeds
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.build-success == 'true'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
